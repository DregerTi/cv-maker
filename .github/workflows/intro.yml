name: Hello World

on:
    push:
      paths-ignore:
        - '**.pdf'
        - '**.mhtml'
        
env:
    VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
    VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: Install pnpm
              uses: pnpm/action-setup@v2.4.0
              with:
                    version: 8
                    run_install: false

            - name: Get pnpm store directory
              shell: bash
              run: |
                    echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
            
            - uses: actions/cache@v3
              name: Setup pnpm cache
              with:
                    path: ${{ env.STORE_PATH }}
                    key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                    restore-keys: |
                        ${{ runner.os }}-pnpm-store-
           
            - name: Install dependencies
              run: pnpm install

            - name: Build
              run: pnpm run build

            - name: Run server
              run: |
                    pnpm run preview &
                    sleep 5

            - name: Test curl
              run: |
                    curl -I http://localhost:4173
    
    snapshit:
      runs-on: ubuntu-latest

      steps:
        - name: Checkout
          uses: actions/checkout@v2

        - name: Install pnpm
          uses: pnpm/action-setup@v2.4.0
          with:
                version: 8
                run_install: false

        - name: Get pnpm store directory
          shell: bash
          run: |
                echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
        
        - uses: actions/cache@v3
          name: Setup pnpm cache
          with:
                path: ${{ env.STORE_PATH }}
                key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                restore-keys: |
                    ${{ runner.os }}-pnpm-store-
        
        - name: Install dependencies
          run: pnpm install

        - name: Build
          run: pnpm run build

        - name: Run server
          run: |
                pnpm run preview &
                sleep 5

        - name: Test curl
          run: |
                curl -I http://localhost:4173

        - name: Make the snapshot
          run: |
                mkdir -m 777 gen
                pnpm preview --host > server.log &
                sleep 5
                docker run -i --init --cap-add=SYS_ADMIN -v ./gen:/home/pptruser/gen --network host ghcr.io/puppeteer/puppeteer:latest node -e "$(cat snapshot.js)" http://localhost:4173 ./gen
                mv gen/* static/
                sed -i 's/http:\/\/127.0.0.1:4173/https:\/\/cv.bnei.dev/g' ./static/*.mhtml
                git add static
                git commit -s -m "snapshot ${{ github.sha }}"
                git push

    deploy:
        runs-on: ubuntu-latest

        needs: build
        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: Install pnpm
              uses: pnpm/action-setup@v2.4.0
              with:
                version: 8
                run_install: false

            - name: Get pnpm store directory
              shell: bash
              run: |
                echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
        
            - uses: actions/cache@v3
              name: Setup pnpm cache
              with:
                path: ${{ env.STORE_PATH }}
                key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                restore-keys: |
                    ${{ runner.os }}-pnpm-store-
        
            - name: Install dependencies
              run: pnpm install
            
            - name: Install Vercel CLI
              run: npm install --global vercel@latest
            - name: Pull Vercel Environment Information
              run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
            - name: Build Project Artifacts
              run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
            - name: Deploy Project Artifacts to Vercel
              run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}

            - name: Deploy production to Netlify
              uses: jsmrcaga/action-netlify-deploy@v2.0.0
              with:
                NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
                NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
                NETLIFY_DEPLOY_TO_PROD: true
                build-dir: './build'
                install_command: 'pnpm install'
                build_command: 'pnpm run build'
